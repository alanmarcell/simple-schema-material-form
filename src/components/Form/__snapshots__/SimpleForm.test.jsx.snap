// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`shallow a TextInput 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <pure(withStateHandlers(simpleForm))
    name="World"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <label
          htmlFor="defaultFormName"
          value="Type Sample"
>
          Type Sample
</label>,
        <input
          id="defaultFormName"
          onChange={[Function]}
          type="text"
          value="Type Sample"
/>,
        <withState(withStateHandlers(component)) />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Type Sample",
          "htmlFor": "defaultFormName",
          "value": "Type Sample",
        },
        "ref": null,
        "rendered": "Type Sample",
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "id": "defaultFormName",
          "onChange": [Function],
          "type": "text",
          "value": "Type Sample",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <label
            htmlFor="defaultFormName"
            value="Type Sample"
>
            Type Sample
</label>,
          <input
            id="defaultFormName"
            onChange={[Function]}
            type="text"
            value="Type Sample"
/>,
          <withState(withStateHandlers(component)) />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Type Sample",
            "htmlFor": "defaultFormName",
            "value": "Type Sample",
          },
          "ref": null,
          "rendered": "Type Sample",
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "id": "defaultFormName",
            "onChange": [Function],
            "type": "text",
            "value": "Type Sample",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
